//문제 출처 https://school.programmers.co.kr/learn/courses/30/lessons/12914

/*

문제 설명
효진이는 멀리 뛰기를 연습하고 있습니다. 효진이는 한번에 1칸, 또는 2칸을 뛸 수 있습니다. 칸이 총 4개 있을 때, 효진이는
(1칸, 1칸, 1칸, 1칸)
(1칸, 2칸, 1칸)
(1칸, 1칸, 2칸)
(2칸, 1칸, 1칸)
(2칸, 2칸)
의 5가지 방법으로 맨 끝 칸에 도달할 수 있습니다. 멀리뛰기에 사용될 칸의 수 n이 주어질 때, 효진이가 끝에 도달하는 방법이 몇 가지인지 알아내, 여기에 1234567를 나눈 나머지를 리턴하는 함수, solution을 완성하세요. 예를 들어 4가 입력된다면, 5를 return하면 됩니다.

제한 사항
n은 1 이상, 2000 이하인 정수입니다.
입출력 예
n	result
4	5
3	3
입출력 예 설명
입출력 예 #1
위에서 설명한 내용과 같습니다.

입출력 예 #2
(2칸, 1칸)
(1칸, 2칸)
(1칸, 1칸, 1칸)
총 3가지 방법으로 멀리 뛸 수 있습니다.

*/

//풀이
function solution(n) {
    let stack = [0n,1n,2n]
    for (let i = 3; i<=n; i++){
        stack[i] = stack[i-1] + stack[i-2]
    }
    var answer = stack[n];
    return answer % 1234567n;
}

console.log(solution(2000))

// 식을 분석해보면 n의 경우의수는 n-1의 경우의수와 n-2의 경우의수의 합이다 
// 그렇기에 배열을 활용해서 값을 찾아준다.
// 정수가 너무 커져서 오버플로우가 나기에 빅인트를 써줘야한다.

// 빅인트는 함수 BigInt() 사용하거나
// 정수 리터럴 뒤에 n을 붙여서 쉽게 사용할수 있다.
